var _user$project$Main$errorMessage = function (error) {
	var _p0 = error;
	switch (_p0.ctor) {
		case 'Timeout':
			return 'Timeout';
		case 'NetworkError':
			return 'Network Error';
		case 'BadUrl':
			return A2(_elm_lang$core$Basics_ops['++'], 'BadUrl', _p0._0);
		case 'BadPayload':
			return A2(_elm_lang$core$Basics_ops['++'], 'Http.BadPayload', _p0._0);
		default:
			return 'Http.BadStatus';
	}
};
var _user$project$Main$fetchPostUrl = 'http://localhost:4000/api/posts';
var _user$project$Main$updateStatus = F2(
	function (txt, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{status: txt});
	});
var _user$project$Main$updateContent = F2(
	function (txt, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{content: txt});
	});
var _user$project$Main$emptyModel = {status: '', content: '', posts: _krisajenkins$remotedata$RemoteData$Loading};
var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$none;
};
var _user$project$Main$Model = F3(
	function (a, b, c) {
		return {status: a, content: b, posts: c};
	});
var _user$project$Main$Post = F2(
	function (a, b) {
		return {text: a, updated_at: b};
	});
var _user$project$Main$postDecoder = A4(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
	'updated_at',
	_elm_lang$core$Json_Decode$string,
	'',
	A4(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
		'text',
		_elm_lang$core$Json_Decode$string,
		'',
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Main$Post)));
var _user$project$Main$postsDecoder = _elm_lang$core$Json_Decode$list(_user$project$Main$postDecoder);
var _user$project$Main$maybeList = function (response) {
	var _p1 = response;
	switch (_p1.ctor) {
		case 'Success':
			return _p1._0;
		case 'Loading':
			return {
				ctor: '::',
				_0: A2(_user$project$Main$Post, 'loading', 'now'),
				_1: {ctor: '[]'}
			};
		case 'NotAsked':
			return {
				ctor: '::',
				_0: A2(_user$project$Main$Post, 'NotAsked', 'now'),
				_1: {ctor: '[]'}
			};
		default:
			return {
				ctor: '::',
				_0: A2(
					_user$project$Main$Post,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'Sth Went Wrong',
						_user$project$Main$errorMessage(_p1._0)),
					'now'),
				_1: {ctor: '[]'}
			};
	}
};
var _user$project$Main$addPost = function (model) {
	return _elm_lang$core$Native_Utils.update(
		model,
		{
			content: '',
			posts: _krisajenkins$remotedata$RemoteData$Success(
				{
					ctor: '::',
					_0: A2(_user$project$Main$Post, model.content, 'today'),
					_1: _user$project$Main$maybeList(model.posts)
				})
		});
};
var _user$project$Main$removePost = F2(
	function (ps, model) {
		return A2(
			_user$project$Main$updateStatus,
			'removed',
			_elm_lang$core$Native_Utils.update(
				model,
				{
					posts: _krisajenkins$remotedata$RemoteData$Success(
						A2(
							_elm_lang$core$List$filter,
							function (p) {
								return !_elm_lang$core$Native_Utils.eq(p, ps);
							},
							_user$project$Main$maybeList(model.posts)))
				}));
	});
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p2 = msg;
		switch (_p2.ctor) {
			case 'OnFetchData':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{status: 'got data', posts: _p2._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Delete':
				return {
					ctor: '_Tuple2',
					_0: A2(_user$project$Main$removePost, _p2._0, model),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Text':
				return {
					ctor: '_Tuple2',
					_0: A2(
						_user$project$Main$updateContent,
						_p2._0,
						A2(_user$project$Main$updateStatus, 'typing', model)),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: _user$project$Main$addPost(
						A2(_user$project$Main$updateStatus, 'saving', model)),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _user$project$Main$OnFetchData = function (a) {
	return {ctor: 'OnFetchData', _0: a};
};
var _user$project$Main$fetchData = A2(
	_elm_lang$core$Platform_Cmd$map,
	_user$project$Main$OnFetchData,
	_krisajenkins$remotedata$RemoteData$sendRequest(
		A2(_elm_lang$http$Http$get, _user$project$Main$fetchPostUrl, _user$project$Main$postsDecoder)));
var _user$project$Main$init = {ctor: '_Tuple2', _0: _user$project$Main$emptyModel, _1: _user$project$Main$fetchData};
var _user$project$Main$Save = {ctor: 'Save'};
var _user$project$Main$Delete = function (a) {
	return {ctor: 'Delete', _0: a};
};
var _user$project$Main$renderList = function (lst) {
	return A2(
		_elm_lang$html$Html$ul,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'background', _1: 'yellow'},
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		},
		A2(
			_elm_lang$core$List$map,
			function (l) {
				return A2(
					_elm_lang$html$Html$li,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(l.text),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(l.updated_at),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onClick(
											_user$project$Main$Delete(l)),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('delete '),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}
					});
			},
			_user$project$Main$maybeList(lst)));
};
var _user$project$Main$Text = function (a) {
	return {ctor: 'Text', _0: a};
};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$textarea,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$value(model.content),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onInput(_user$project$Main$Text),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('postText'),
							_1: {ctor: '[]'}
						}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$input,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$value(model.status),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('postState'),
							_1: {ctor: '[]'}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$button,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(_user$project$Main$Save),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('postButton'),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Save'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: _user$project$Main$renderList(model.posts),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _user$project$Main$main = _elm_lang$html$Html$program(
	{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})();
