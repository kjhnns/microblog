var _user$project$Main$notFoundView = A2(
	_elm_lang$html$Html$div,
	{ctor: '[]'},
	{
		ctor: '::',
		_0: _elm_lang$html$Html$text('Not found'),
		_1: {ctor: '[]'}
	});
var _user$project$Main$page = function (model) {
	var _p0 = model.route;
	switch (_p0.ctor) {
		case 'ReadRoute':
			return _user$project$Views_Read$readView(model);
		case 'PostRoute':
			return _user$project$Views_Post$postView(model);
		default:
			return _user$project$Main$notFoundView;
	}
};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _user$project$Main$page(model),
			_1: {ctor: '[]'}
		});
};
var _user$project$Main$postDecoder = A4(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
	'updated_at',
	_elm_lang$core$Json_Decode$string,
	'',
	A4(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
		'text',
		_elm_lang$core$Json_Decode$string,
		'',
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Model$Post)));
var _user$project$Main$postsDecoder = _elm_lang$core$Json_Decode$list(_user$project$Main$postDecoder);
var _user$project$Main$fetchPostUrl = 'http://localhost:4000/api/posts';
var _user$project$Main$fetchData = A2(
	_elm_lang$core$Platform_Cmd$map,
	_user$project$Model$OnFetchData,
	_krisajenkins$remotedata$RemoteData$sendRequest(
		A2(_elm_lang$http$Http$get, _user$project$Main$fetchPostUrl, _user$project$Main$postsDecoder)));
var _user$project$Main$addPost = function (model) {
	return _elm_lang$core$Native_Utils.update(
		model,
		{
			content: '',
			posts: _krisajenkins$remotedata$RemoteData$Success(
				{
					ctor: '::',
					_0: A2(_user$project$Model$Post, model.content, 'today'),
					_1: _user$project$Views_Read$maybeList(model.posts)
				})
		});
};
var _user$project$Main$updateStatus = F2(
	function (txt, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{status: txt});
	});
var _user$project$Main$removePost = F2(
	function (ps, model) {
		return A2(
			_user$project$Main$updateStatus,
			'removed',
			_elm_lang$core$Native_Utils.update(
				model,
				{
					posts: _krisajenkins$remotedata$RemoteData$Success(
						A2(
							_elm_lang$core$List$filter,
							function (p) {
								return !_elm_lang$core$Native_Utils.eq(p, ps);
							},
							_user$project$Views_Read$maybeList(model.posts)))
				}));
	});
var _user$project$Main$updateContent = F2(
	function (txt, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{content: txt});
	});
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p1 = msg;
		switch (_p1.ctor) {
			case 'OnFetchData':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{status: 'got data', posts: _p1._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Delete':
				return {
					ctor: '_Tuple2',
					_0: A2(_user$project$Main$removePost, _p1._0, model),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Text':
				return {
					ctor: '_Tuple2',
					_0: A2(
						_user$project$Main$updateContent,
						_p1._0,
						A2(_user$project$Main$updateStatus, 'typing', model)),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Save':
				return {
					ctor: '_Tuple2',
					_0: _user$project$Main$addPost(
						A2(_user$project$Main$updateStatus, 'saving', model)),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				var newRoute = _user$project$Routing$parseLocation(_p1._0);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{route: newRoute}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _user$project$Main$initialModel = function (route) {
	return {status: '', content: '', route: route, posts: _krisajenkins$remotedata$RemoteData$Loading};
};
var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$none;
};
var _user$project$Main$init = function (location) {
	var currentRoute = _user$project$Routing$parseLocation(location);
	return {
		ctor: '_Tuple2',
		_0: _user$project$Main$initialModel(currentRoute),
		_1: _user$project$Main$fetchData
	};
};
var _user$project$Main$main = A2(
	_elm_lang$navigation$Navigation$program,
	_user$project$Model$OnLocationChange,
	{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})();
